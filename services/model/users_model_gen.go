// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"errors"
	"fmt"

	"database/sql"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/SpectatorNan/gorm-zero/gormc/pagex"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGormzeroUsersIdPrefix = "cache:gormzero:users:id:"
)

type (
	usersModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Users) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Users) error
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
			orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]Users, int64, error)
		Update(ctx context.Context, tx *gorm.DB, data *Users) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Users) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Users) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
	}

	defaultUsersModel struct {
		gormc.CachedConn
		table string
	}

	Users struct {
		Id        int64          `gorm:"column:id;primary_key"`
		Account   sql.NullString `gorm:"column:account"`
		NickName  sql.NullString `gorm:"column:nick_name"`
		Password  sql.NullString `gorm:"column:password"`
		CreatedAt sql.NullTime   `gorm:"column:created_at"`
		UpdatedAt sql.NullTime   `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (Users) TableName() string {
	return "`users`"
}

func newUsersModel(db *gorm.DB, c cache.CacheConf) *defaultUsersModel {
	return &defaultUsersModel{
		CachedConn: gormc.NewConn(db, c),
		table:      "`users`",
	}
}

func (m *defaultUsersModel) GetCacheKeys(data *Users) []string {
	if data == nil {
		return []string{}
	}
	gormzeroUsersIdKey := fmt.Sprintf("%s%v", cacheGormzeroUsersIdPrefix, data.Id)
	cacheKeys := []string{
		gormzeroUsersIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUsersModel) Insert(ctx context.Context, tx *gorm.DB, data *Users) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultUsersModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Users) error {

	err := batchx.BatchExecCtxV2(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		for _, v := range news {
			if err := db.Create(&v).Error; err != nil {
				return err
			}
		}
		return nil
	}, tx)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	gormzeroUsersIdKey := fmt.Sprintf("%s%v", cacheGormzeroUsersIdPrefix, id)
	var resp Users
	err := m.QueryCtx(ctx, &resp, gormzeroUsersIdKey, func(conn *gorm.DB) error {
		return conn.Model(&Users{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultUsersModel) FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
	orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]Users, int64, error) {
	formatDB := func(conn *gorm.DB) (*gorm.DB, *gorm.DB) {
		db := conn.Model(&Users{})
		if whereClause != nil {
			db = whereClause(db)
		}
		return db, nil
	}
	res, total, err := pagex.FindPageList[Users](ctx, m, page, orderBy, orderKeys, formatDB)
	return res, total, err
}

func (m *defaultUsersModel) Update(ctx context.Context, tx *gorm.DB, data *Users) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultUsersModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Users) error {
	clearData := make([]Users, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtxV2(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		for _, v := range news {
			if err := db.Save(&v).Error; err != nil {
				return err
			}
		}
		return nil
	}, tx)

	return err
}

func (m *defaultUsersModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Users{}, id).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultUsersModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Users) error {
	err := batchx.BatchExecCtxV2(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		for _, v := range datas {
			if err := db.Delete(&v).Error; err != nil {
				return err
			}
		}
		return nil
	}, tx)
	return err
}

func (m *defaultUsersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGormzeroUsersIdPrefix, primary)
}

func (m *defaultUsersModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Users{}).Where("`id` = ?", primary).Take(v).Error
}
