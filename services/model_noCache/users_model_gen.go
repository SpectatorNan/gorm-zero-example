// Code generated by goctl. DO NOT EDIT!

package model_noCache

import (
	"context"
	"database/sql"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/SpectatorNan/gorm-zero/gormc/conn"

	"github.com/SpectatorNan/gorm-zero/gormc/pagex"
	"gorm.io/gorm"
)

type (
	usersModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Users) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Users) error
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
			orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]Users, int64, error)
		Update(ctx context.Context, tx *gorm.DB, data *Users) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Users) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Users) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
	}

	defaultUsersModel struct {
		gormc.Conn
		table string
	}

	Users struct {
		Id        int64          `gorm:"column:id;primary_key"`
		Account   sql.NullString `gorm:"column:account"`
		NickName  sql.NullString `gorm:"column:nick_name"`
		Password  sql.NullString `gorm:"column:password"`
		CreatedAt sql.NullTime   `gorm:"column:created_at"`
		UpdatedAt sql.NullTime   `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (Users) TableName() string {
	return "`users`"
}

func newUsersModel(db *gorm.DB) *defaultUsersModel {
	return &defaultUsersModel{
		Conn:  conn.NewConn(db),
		table: "`users`",
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, tx *gorm.DB, data *Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&data).Error
	return err
}
func (m *defaultUsersModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Users) error {
	//db := m.conn
	//if tx != nil {
	//	db = tx
	//}
	//err := db.Create(&news).Error

	err := batchx.BatchNoCacheExecCtx(ctx, m, func(conn *gorm.DB) error {
		db := conn
		for _, v := range news {
			if err := db.Create(&v).Error; err != nil {
				return err
			}
		}
		return nil
	}, tx)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	var resp Users
	err := m.conn.WithContext(ctx).Model(&Users{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultUsersModel) FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
	orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]Users, int64, error) {
	conn := m.conn
	formatDB := func() (*gorm.DB, *gorm.DB) {
		db := conn.Model(&Users{})
		if whereClause != nil {
			db = whereClause(db)
		}
		return db, nil
	}

	res, total, err := pagex.FindPageListWithCount[Users](ctx, page, orderBy, orderKeys, formatDB)
	return res, total, err
}

func (m *defaultUsersModel) Update(ctx context.Context, tx *gorm.DB, data *Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultUsersModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultUsersModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Users{}, id).Error

	return err
}

func (m *defaultUsersModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Delete(&datas).Error
	return err
}
