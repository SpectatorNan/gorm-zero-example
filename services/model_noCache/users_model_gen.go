// Code generated by goctl. DO NOT EDIT!

package model_noCache

import (
	"context"
	"database/sql"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"gorm.io/gorm"
)

type (
	usersModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Users) error

		FindOne(ctx context.Context, id int64) (*Users, error)
		Update(ctx context.Context, tx *gorm.DB, data *Users) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUsersModel struct {
		conn  *gorm.DB
		table string
	}

	Users struct {
		Id       int64          `gorm:"column:id"`
		Account  sql.NullString `gorm:"column:account"`
		NickName sql.NullString `gorm:"column:nick_name"`
		Password sql.NullString `gorm:"column:password"`
		CreateAt sql.NullTime   `gorm:"column:create_at"`
		UpdateAt sql.NullTime   `gorm:"column:update_at"`
		DeleteAt sql.NullTime   `gorm:"column:delete_at"`
	}
)

func (Users) TableName() string {
	return "`users`"
}

func newUsersModel(conn *gorm.DB) *defaultUsersModel {
	return &defaultUsersModel{
		conn:  conn,
		table: "`users`",
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, tx *gorm.DB, data *Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	var resp Users
	err := m.conn.WithContext(ctx).Model(&Users{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Update(ctx context.Context, tx *gorm.DB, data *Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultUsersModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Users{}, id).Error

	return err
}

func (m *defaultUsersModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
