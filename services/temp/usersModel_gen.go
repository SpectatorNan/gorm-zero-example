// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`create_time`", "`update_time`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGormzeroUsersIdPrefix      = "cache:gormzero:users:id:"
	cacheGormzeroUsersAccountPrefix = "cache:gormzero:users:account:"
	cacheGormzeroUsersNamePrefix    = "cache:gormzero:users:name:"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindOneByAccount(ctx context.Context, account sql.NullString) (*Users, error)
		FindOneByName(ctx context.Context, name sql.NullString) (*Users, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersModel struct {
		sqlc.CachedConn
		table string
	}

	Users struct {
		Id       int64          `db:"id"`
		Account  sql.NullString `db:"account"`
		Name     sql.NullString `db:"name"`
		CreateAt sql.NullTime   `db:"create_at"`
		UpdateAt sql.NullTime   `db:"update_at"`
		DeleteAt sql.NullTime   `db:"delete_at"`
	}
)

func newUsersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUsersModel {
	return &defaultUsersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`users`",
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	gormzeroUsersIdKey := fmt.Sprintf("%s%v", cacheGormzeroUsersIdPrefix, data.Id)
	gormzeroUsersAccountKey := fmt.Sprintf("%s%v", cacheGormzeroUsersAccountPrefix, data.Account)
	gormzeroUsersNameKey := fmt.Sprintf("%s%v", cacheGormzeroUsersNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Account, data.Name, data.CreateAt, data.UpdateAt, data.DeleteAt)
	}, gormzeroUsersIdKey, gormzeroUsersAccountKey, gormzeroUsersNameKey)
	return ret, err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	gormzeroUsersIdKey := fmt.Sprintf("%s%v", cacheGormzeroUsersIdPrefix, id)
	var resp Users
	err := m.QueryRowCtx(ctx, &resp, gormzeroUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByAccount(ctx context.Context, account sql.NullString) (*Users, error) {
	gormzeroUsersAccountKey := fmt.Sprintf("%s%v", cacheGormzeroUsersAccountPrefix, account)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, gormzeroUsersAccountKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `account` = ? limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, account); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByName(ctx context.Context, name sql.NullString) (*Users, error) {
	gormzeroUsersNameKey := fmt.Sprintf("%s%v", cacheGormzeroUsersNamePrefix, name)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, gormzeroUsersNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Update(ctx context.Context, data *Users) error {
	gormzeroUsersIdKey := fmt.Sprintf("%s%v", cacheGormzeroUsersIdPrefix, data.Id)
	gormzeroUsersAccountKey := fmt.Sprintf("%s%v", cacheGormzeroUsersAccountPrefix, data.Account)
	gormzeroUsersNameKey := fmt.Sprintf("%s%v", cacheGormzeroUsersNamePrefix, data.Name)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Account, data.Name, data.CreateAt, data.UpdateAt, data.DeleteAt, data.Id)
	}, gormzeroUsersIdKey, gormzeroUsersAccountKey, gormzeroUsersNameKey)
	return err
}

func (m *defaultUsersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	gormzeroUsersIdKey := fmt.Sprintf("%s%v", cacheGormzeroUsersIdPrefix, id)
	gormzeroUsersAccountKey := fmt.Sprintf("%s%v", cacheGormzeroUsersAccountPrefix, data.Account)
	gormzeroUsersNameKey := fmt.Sprintf("%s%v", cacheGormzeroUsersNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gormzeroUsersIdKey, gormzeroUsersAccountKey, gormzeroUsersNameKey)
	return err
}

func (m *defaultUsersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGormzeroUsersIdPrefix, primary)
}

func (m *defaultUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}
